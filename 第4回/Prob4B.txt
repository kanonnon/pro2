【4-6】
(a)
cnt1 = 1, cnt2 = 1
cnt1 = 1, cnt2 = 1
(b)
cnt1 = 2, cnt2 = 1
cnt1 = 2, cnt2 = 1
(c)
cnt1 = 2, cnt2 = 2
cnt1 = 2, cnt2 = 1

(a)
cnt1はクラス変数で1に初期化されており、TestVarクラスのインスタンスが生成されると、そのインスタンスのcnt2は1に初期化される。
cnt1にもcnt2にもインクリメントの操作は加えていないので、v1もv2も、cnt1とcnt2が1と表示される。
(b)
「incr1();」を実行すると、クラス変数cnt1がインクリメントされて、2となる。
クラス変数は、クラスで用意されている変数であり、インスタンス変数とは異なり、インスタンスごとに値は変わらない。
つまり、v1においてもv2においてもクラス変数cnt1は共通であるため、どちらもcnt1が2と表示される。
(c)
「v1.incr2();」を実行すると、v1のインスタンス変数cnt2がインクリメントされて、2となる。
インスタンス変数は、インスタンスごとに用意されている変数であり、クラス変数とは異なり、インスタンスごとに値が変わる。
つまり、v1のcnt2ついてのみインクリメントされたため、v1のcnt2が2と表示される。

【4-7】
(b)
There are 2 vectors.
v1: (2.0, 23.0)
v2: (4.0, 28.0)
v1 and v2 are same? false
Double size of v1.
v1 and v2 are same? false
Length is 46.17358552246078

(c)
There are 2 vectors.
v1: (2.0, 23.0)
v2: (4.0, 28.0)
v1 and v2 are same? false
Double size of v1.
v1 and v2 are same? false
Length is 23.08679276123039

「v1.constMult(2);」はv1のベクトルの各成分を2倍にしたベクトルを戻り値とするだけであり、v1ベクトルの実際の成分の値を更新しているわけではない。
(b)においては、「v1 = v1.constMult(2);」という形で、2倍にしたベクトルの戻り値をv1に代入していたため、各成分を2倍した後(4, 46)のベクトルの大きさが表示されている。
一方(c)においては、戻り値をどこにも代入していないので、v1ベクトルの各成分は元の(2, 23)のままであり、その大きさが表示されている。